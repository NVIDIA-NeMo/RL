# SFT Algorithm Configuration
sft:
  max_num_epochs: 100
  max_num_steps: 60000
  val_period: 1000
  val_batches: 4
  val_global_batch_size: 128
  val_micro_batch_size: 2
  val_at_start: true
  seed: 42

checkpointing:
  enabled: true
  checkpoint_dir: "results/sft_openmath"
  metric_name: "val_loss"
  higher_is_better: false
  keep_top_k: 12 ## save all checkpoints
  save_period: 1000

policy:
  model_name: "meta-llama/Llama-3.1-8B"
  tokenizer:
    name: ${policy.model_name} ## specify if you'd like to use a tokenizer different from the model's default
    chat_template: NULL
    #chat_template: "{% for message in messages %}{%- if message['role'] == 'system'  %}{{'Context: ' + message['content'].strip()}}{%- elif message['role'] == 'user'  %}{{' Question: ' + message['content'].strip() + ' Answer:'}}{%- elif message['role'] == 'assistant'  %}{{' ' + message['content'].strip()}}{%- endif %}{% endfor %}"
  train_global_batch_size: 512
  train_micro_batch_size: 2
  max_total_sequence_length: 4096  #1024
  precision: "bfloat16"
  fsdp_offload_enabled: false
  activation_checkpointing_enabled: false

  dtensor_cfg:
    enabled: true
    cpu_offload: False
    sequence_parallel: false
    activation_checkpointing: false
    tensor_parallel_size: 4

  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.dtensor_cfg.tensor_parallel_size}
  max_grad_norm: null

  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 2e-5
      weight_decay: 0.01
      betas: [0.9, 0.98]
      eps: 1e-8
      # when using Dtensor, we need to set foreach
      # and fused to False
      foreach: False
      fused: False

data:
  max_input_seq_length: ${policy.max_total_sequence_length}
  dataset_name: "prompt_response_dataset"
  add_bos: false
  add_eos: false
  add_generation_prompt: false
  train_data_path: "/lustre/fsw/portfolios/coreai/users/yifuw/datasets/sft/openmathinstruct2-sft.jsonl"
  val_data_path: "/lustre/fsw/portfolios/coreai/users/yifuw/datasets/sft/openmathinstruct2-sft.jsonl"
  input_key: 'input'
  output_key: 'output'

# data:
#   max_input_seq_length: ${policy.max_total_sequence_length}
#   dataset_name: "openmathinstruct2"
#   add_bos: false
#   add_eos: false
#   # train_data_path: "/lustre/fsw/portfolios/coreai/users/yifuw/datasets/sft/openmathinstruct2-sft.jsonl"
#   # val_data_path: "/lustre/fsw/portfolios/coreai/users/yifuw/datasets/sft/openmathinstruct2-sft.jsonl"
#   # input_key: 'input'
#   # output_key: 'output'

logger:
  log_dir: "logs"  # Base directory for all logs
  wandb_enabled: true # Make sure you do a ``wandb login [Your API key]'' before running
  tensorboard_enabled: false
  monitor_gpus: false  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  wandb:
    project: "sft-dev-yifu"
    name: "openmathinstruct-nemorl-mbs2"
  tensorboard:
    log_dir: "tb_logs-sft-dev-${data.dataset_name}"
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)

cluster:
  gpus_per_node: 8
  num_nodes: 8
