# Regularly updates the CI container
name: Reboots VMs in a controlled way
on:
  push:

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      list-of-vms: ${{ steps.main.outputs.main }}
    environment: main
    steps:
      - name: Get list of VMs
        id: main
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          RUNNERS=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ github.api_url }}/repos/${{ github.repository }}/actions/runners)

          MATRIX=$(echo $RUNNERS \
            | jq -c '[
                .runners[]
                | select(.status == "online")
                | select(.name | contains("cpu") | not)
                | {
                  "vm": .name,
                  "n_gpus": [
                    .labels[]
                    | select(.name | endswith("gpu")) | .name
                  ][0][:1]
                }
              ]
            '
          )
          echo main=$MATRIX | tee -a "$GITHUB_OUTPUT"

  healthcheck:
    needs: pre-flight
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.pre-flight.outputs.list-of-vms )}}
    uses: ./.github/workflows/_healthcheck_vm.yml
    with:
      vm: ${{ matrix.vm }}
      n_gpus: ${{ matrix.n_gpus }}
    secrets:
      SLACK_WEBHOOK_ADMIN: ${{ secrets.SLACK_WEBHOOK_ADMIN }}
      SLACK_RELEASE_ENDPOINT: ${{ secrets.SLACK_RELEASE_ENDPOINT }}
      VM_KEY: ${{ secrets.VM_KEY }}
      PAT: ${{ secrets.PAT }}

  check-offline-runners:
    needs: healthcheck
    if: ${{ always() }}
    runs-on: ubuntu-latest
    outputs:
      has_offline: ${{ steps.check.outputs.has_offline }}
    steps:
      - name: Check if any runners are offline
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          RUNNERS=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${{ github.api_url }}/repos/${{ github.repository }}/actions/runners)

          OFFLINE_COUNT=$(echo $RUNNERS | jq '[.runners[] | select(.status == "offline")] | length')

          if [[ $OFFLINE_COUNT -gt 0 ]]; then
            echo "Found $OFFLINE_COUNT offline runners"
            echo "has_offline=true" >> "$GITHUB_OUTPUT"
          else
            echo "All runners are online"
            echo "has_offline=false" >> "$GITHUB_OUTPUT"
          fi

  wait-for-reboot:
    needs: check-offline-runners
    if: ${{ needs.check-offline-runners.outputs.has_offline == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Wait for VMs to come back online
        run: |
          WAIT_MINUTES=5
          echo "Waiting ${WAIT_MINUTES} minutes for rebooted VMs to come back online..."
          sleep $((WAIT_MINUTES * 60))

  recheck:
    needs: wait-for-reboot
    if: ${{ always() && needs.wait-for-reboot.result == 'success' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.pre-flight.outputs.list-of-vms )}}
    uses: ./.github/workflows/_healthcheck_vm.yml
    with:
      vm: ${{ matrix.vm }}
      n_gpus: ${{ matrix.n_gpus }}
      is_recheck: true
    secrets:
      SLACK_WEBHOOK_ADMIN: ${{ secrets.SLACK_WEBHOOK_ADMIN }}
      SLACK_RELEASE_ENDPOINT: ${{ secrets.SLACK_RELEASE_ENDPOINT }}
      VM_KEY: ${{ secrets.VM_KEY }}
      PAT: ${{ secrets.PAT }}
