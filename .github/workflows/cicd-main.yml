# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "CICD Reinforcer"

on:
  pull_request:
    branches:
      - 'main'
      - 'r**'
    types: [labeled]
  merge_group:
    types: [checks_requested]
  workflow_dispatch:
    inputs:
      test_to_run:
        required: false
        default: all
        type: string
        description: Comma-separated list of tests to run. Use "all" to run the full test suite.
  # TODO: Due to limited compute, disabling pushes to main. This is okay to do since we force PRs to be up to date and the CI tests on pull/$PR_NUM/merge
  #push:
  #  branches:
  #    - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event.label.name || 'main' }}
  cancel-in-progress: true

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      test_to_run: ${{ steps.test_to_run.outputs.main }}
      all: ${{ steps.all.outputs.main }}
      run_ci: ${{ steps.evaluate.outputs.run_ci }}
    steps:
      - name: Parse test_to_run
        id: test_to_run
        run: |
          parsed_string=$(echo ${{ inputs.test_to_run || 'all' }} | jq -c --raw-input 'split(",")')
          echo "main=${parsed_string}" | tee -a "$GITHUB_OUTPUT"
      - name: Parse all
        id: all
        run: |
          echo "main=${{ contains(fromJSON(steps.test_to_run.outputs.main), 'all') }}" | tee -a "$GITHUB_OUTPUT"

      - name: Get changed files
        id: changed-files
        if: github.event_name == 'pull_request'
        uses: step-security/changed-files@v45.0.1
        with:
          files_yaml: |
            doc:
              - '**.md'
              - docs/**
            src:
              - '!**.md'
              - '!docs/**'

      - name: Evaluate conditions
        id: evaluate
        env:
          DOCS_ONLY: ${{ steps.changed-files.outputs.doc_any_changed == 'true' && steps.changed-files.outputs.src_any_changed == 'false' }}
          CHANGED_DOCS: ${{ steps.changed-files.outputs.doc_all_changed_files }}
          CHANGED_SRC: ${{ steps.changed-files.outputs.src_all_changed_files }}
          IS_PULLREQUEST: ${{ github.event_name == 'pull_request' }}
          LABEL: ${{ github.event.label.name == 'Run CICD' }}
          MERGE_GROUP: ${{ github.event_name == 'merge_group' }}
        run: |
          # Some output that's helpful for debugging
          echo "Docs changed: $CHANGED_DOCS"
          echo "Src changed: $CHANGED_SRC"
          
          # echo "DOCS_ONLY: $DOCS_ONLY"
          echo "LABEL: $LABEL"
          echo "IS_PULLREQUEST: $IS_PULLREQUEST"
          
          # Run CI only (on main or if label is attached) and if it's not only docs
          echo run_ci=$([[ ("$LABEL" = "true" || "$IS_PULLREQUEST" = "false" || "$MERGE_GROUP" = "true")  && "$DOCS_ONLY" = "false" ]] && echo "true" || echo "false") | tee -a "$GITHUB_OUTPUT"
  
  lint-check:
    name: Lint check
    needs: [pre-flight]
    runs-on: ubuntu-latest
    if: ${{ needs.pre-flight.outputs.run_ci == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check lint
        run: |
          pip install pre-commit
          pre-commit install
          pre-commit run --all-files --show-diff-on-failure --color=always
  
  sphinx-build:
    name: Sphinx build
    needs: [pre-flight]
    runs-on: ubuntu-latest
    if: ${{ needs.pre-flight.outputs.run_ci == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: build docs
        run: |
          pip install uv
          cd docs/
          uv run --extra docs sphinx-build . _build/html

  build-container:
    if: ${{ needs.pre-flight.outputs.run_ci == 'true' }}
    needs: [pre-flight]
    uses: NVIDIA/NeMo-FW-CI-templates/.github/workflows/_build_container.yml@v0.22.7
    with:
      build-ref: ${{ github.sha }}
      image-name: nemo_reinforcer_container
      dockerfile: docker/Dockerfile
      image-label: nemo-reinforcer
      build-args: |
        MAX_JOBS=32
        REINFORCER_COMMIT=${{ github.sha }}

  sphinx-doctest:
    name: Sphinx doctest
    needs: [build-container, pre-flight]
    uses: ./.github/workflows/_run_test.yml
    if: ${{ needs.pre-flight.outputs.run_ci == 'true' }}
    with:
      RUNNER: self-hosted-azure
      TIMEOUT: 10
      SCRIPT: |
        cd ${REINFORCER_REPO_DIR}/docs
        uv run --extra docs sphinx-build -b doctest . _build/doctest
    secrets:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

  unit-tests:
    name: Unit tests
    needs: [build-container, pre-flight]
    uses: ./.github/workflows/_run_test.yml
    if: ${{ needs.pre-flight.outputs.run_ci == 'true' }}
    with:
      RUNNER: self-hosted-azure
      TIMEOUT: 15
      SCRIPT: |
        cd ${REINFORCER_REPO_DIR}
        uv run --extra test bash -x ./tests/run_unit.sh
      FINAL_SCRIPT_EXTERNAL: |
        cat <<EOF | tee -a $GITHUB_STEP_SUMMARY
        # Unit test results
        \`\`\`json
        $(cat tests/unit/unit_results.json || echo "n/a")
        \`\`\`
        EOF
    secrets:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

  functional-tests:
    name: ${{ matrix.test_case }}
    needs: [build-container, pre-flight]
    uses: ./.github/workflows/_run_test.yml
    if: ${{ needs.pre-flight.outputs.run_ci == 'true' }}
    strategy:
      matrix:
        test_case:
          - sft.sh
          - grpo.sh
    with:
      # TODO: For now, allow these to fail since the checks are not robust.
      IS_OPTIONAL: true
      RUNNER: self-hosted-azure
      TIMEOUT: 15
      SCRIPT: |
        cd ${REINFORCER_REPO_DIR}
        uv run bash ./tests/functional/${{ matrix.test_case }}
    secrets:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}